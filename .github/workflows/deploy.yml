name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: pnpm install
      
    - name: Run tests (if you have any)
      run: |
        # Add your test commands here when you have tests
        # pnpm test
        echo "Tests passed"
        
    - name: Build applications
      run: |
        pnpm run build
        echo "Build completed successfully"
        
    - name: Check build artifacts
      run: |
        ls -la apps/frontend/dist/
        ls -la apps/ai-agent/dist/
        
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          cd /var/www/news-trading-agent
          
          echo "Starting Docker deployment..."
          
          # Pull latest changes
          git pull origin main
          
          # Stop and remove existing container
          docker stop news-trading-agent || true
          docker rm news-trading-agent || true
          
          # Remove old image to save space
          docker rmi news-trading-agent || true
          
          # Build new Docker image
          echo "Building Docker image..."
          docker build -t news-trading-agent .
          
          # Run new container
          echo "Starting new container..."
          docker run -d \
            --name news-trading-agent \
            -p 3003:3003 \
            --restart unless-stopped \
            -v /var/www/news-trading-agent/logs:/app/logs \
            news-trading-agent
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 15
          
          # Check if container is running
          if ! docker ps | grep -q "news-trading-agent"; then
            echo "Container failed to start"
            docker logs news-trading-agent
            exit 1
          fi
          
          # Test application health
          echo "Testing application health..."
          if ! curl -f http://localhost:3003/health; then
            echo "Health check failed"
            docker logs news-trading-agent
            exit 1
          fi
          
          # Fix frontend file permissions for Nginx
          sudo chown -R www-data:www-data /var/www/news-trading-agent/apps/frontend/dist/
          sudo chmod -R 755 /var/www/news-trading-agent/apps/frontend/dist/
          
          # Reload Nginx to pick up any new static files
          sudo systemctl reload nginx
          
          # Final test of both frontend and API
          if ! curl -f http://bot.tumrabert.com/health; then
            echo "Final health check failed"
            exit 1
          fi
          
          echo "Docker deployment completed successfully!"
          echo "Application is live at: http://bot.tumrabert.com"
          
    - name: Notify on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          echo "Deployment failed - manual intervention required"
          # You can add notification logic here (email, Slack, etc.)